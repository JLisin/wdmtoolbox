environment:

  matrix:
    - PYTHON_VERSION: "2.7"
      MINGWPATH: "C:\\msys64\\mingw32"
    - PYTHON_VERSION: "3.3"
      MINGWPATH: "C:\\msys64\\mingw32"
    - PYTHON_VERSION: "3.4"
      MINGWPATH: "C:\\msys64\\mingw32"
    - PYTHON_VERSION: "3.5"
      MINGWPATH: "C:\\msys64\\mingw32"
    - PYTHON_VERSION: "2.7"
      MINGWPATH: "C:\\msys64\\mingw64"
    - PYTHON_VERSION: "3.3"
      MINGWPATH: "C:\\msys64\\mingw64"
    - PYTHON_VERSION: "3.4"
      MINGWPATH: "C:\\msys64\\mingw64"
    - PYTHON_VERSION: "3.5"
      MINGWPATH: "C:\\msys64\\mingw64"

install:
  - set PATH=C:\Miniconda\Scripts;%MINGWPATH%\bin
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda create -q --name python%PYTHON_VERSION% python=%PYTHON_VERSION% 
  - conda install -q --name python%PYTHON_VERSION% setuptools numpy scipy matplotlib nose pandas wheel
  - activate python%PYTHON_VERSION%
  - pip install -q mando tstoolbox baker
#  - pip install -i https://pypi.anaconda.org/carlkl/simple mingwpy
#  - ps: $mingw=(Get-ChildItem -Include libmingw32.a -Recurse -path C:\MinGW)
#  - ps: Copy-Item -LiteralPath C:\MinGW\lib\libmingw32.a -Destination mingw32.lib
#  - ps: $f=(Get-ChildItem $MINGWPATH\* -Include libquadmath*.* -Recurse)
  - set f=(gfortran -print-file-name=libquadmath.a)
  - ps: Copy-Item -LiteralPath $f -Destination quadmath.lib
  - dir *.lib
  - python.exe setup.py config_fc 
  - python.exe setup.py config --compiler=msvc --fcompiler=gfortran --libraries=quadmath
  - python.exe setup.py build

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - build.cmd python.exe setup.py test

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - build.cmd python.exe setup.py bdist_wheel --fcompiler=gfortran --compiler=msvc

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
