environment:

  matrix:

    # For Python versions available on Appveyor, see
    # http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Miniconda"
      bits: "32"
      arch: "x86"
  #    - PYTHON: "C:\\Miniconda-x64"
  #      DISTUTILS_USE_SDK: "1"
  #    - PYTHON: "C:\\Miniconda3"
  #    - PYTHON: "C:\\Miniconda3-x64"
  #      DISTUTILS_USE_SDK: "1"
  #    - PYTHON: "C:\\Miniconda35"
  #    - PYTHON: "C:\\Miniconda35-x64"
  #      DISTUTILS_USE_SDK: "1"

install:
  - set PATH=%PYTHON%;%PYTHON%\Scripts;C:\MinGW\bin;%PATH%
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda install -q setuptools numpy scipy matplotlib nose dateutil pandas wheel
  - pip install mando tstoolbox baker
  - pip install -i https://pypi.anaconda.org/carlkl/simple mingwpy
    #  - mingw-get install gfortran
    #  - mingw-get install gcc-core
    #  - mingw-get install binutils
    ##  - ps: $mingw=(Get-ChildItem -Include libmingw32.a -Recurse -path C:\MinGW)
    #  - ps: Copy-Item -LiteralPath C:\MinGW\lib\libmingw32.a -Destination mingw32.lib
    ##  - ps: $mingwex=(Get-ChildItem -Include libmingwx.a -Recurse -path C:\MinGW)
    #  - ps: Copy-Item -LiteralPath C:\MinGW\lib\libmingwex.a -Destination mingwex.lib
  - "build.cmd python.exe setup.py build --compiler=msvc"

build: off

test_script:
  # Put your test command here.
  # If you don't need to build C extensions on 64-bit Python 3.3 or 3.4,
  # you can remove "build.cmd" from the front of the command, as it's
  # only needed to support those cases.
  # Note that you must use the environment variable %PYTHON% to refer to
  # the interpreter you're using - Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "build.cmd python.exe setup.py test"

after_test:
  # This step builds your wheels.
  # Again, you only need build.cmd if you're building C extensions for
  # 64-bit Python 3.3/3.4. And you need to use %PYTHON% to get the correct
  # interpreter
  - "build.cmd python.exe setup.py bdist_wheel"

artifacts:
  # bdist_wheel puts your built wheel in the dist directory
  - path: dist\*

#on_success:
#  You can use this step to upload your artifacts to a public website.
#  See Appveyor's documentation for more details. Or you can simply
#  access your wheels from the Appveyor "artifacts" tab for your build.
